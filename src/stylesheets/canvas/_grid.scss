/*============================================================================
  #Grid
    - Creates a 12 column responsive grid based on the `$grid-columns` variable.
    If you want to change the number of columns, be sure to also update the
    `grid-uniform-clearfix` mixin.
==============================================================================*/

$mobile: 'mobile';
$tablet-only: 'tablet-only';
$tablet-down: 'tablet-down';
$tablet-up: 'tablet-up';
$desktop-up: 'desktop-up';
$widescreen: 'widescreen';

$grid-tablet: 750px;
$grid-desktop: 990px;
$grid-widescreen: 1400px;
$grid-gutter: 30px;
$grid-columns: 12;

// The `$grid-breakpoints` list is used to build our media queries. You can use
// these in the media-queries mixin or as modifiers to your grid classes to
// target specific breakpoint. i.e. `.grid-6--tablet-down` will target screen
// widths below the value set by `$grid-desktop`
$grid-breakpoints: (
  'mobile' '(max-width: #{$grid-tablet - 1})',
  'tablet-only' '(min-width: #{$grid-tablet}) and (max-width: #{$grid-desktop - 1})',
  'tablet-down' '(max-width: #{$grid-desktop - 1})',
  'tablet-up' '(min-width: #{$grid-tablet})',
  'desktop-up' '(min-width: #{$grid-desktop})',
  'widescreen' '(min-width: #{$grid-widescreen})'
);

/*============================================================================
  Add grid classes based on breaktpoint names.
    - Example $grid-breakpoint-has-push: ('mobile', 'desktop-up');
    - Remove names if you don't want those classes generated
==============================================================================*/
$grid-breakpoint-types: ('mobile', 'tablet-only', 'tablet-down', 'tablet-up', 'desktop-up', 'widescreen');

/*============================================================================
  Add push classes by including the appropriate breakpoint name(s).
    - Example: $grid-breakpoint-has-push: ('tablet-only', 'desktop-up');
==============================================================================*/
$grid-breakpoint-has-push: ();

/*============================================================================
  Grid Setup
    1. Allow the grid system to be used on lists.
    2. Remove any margins and paddings that might affect the grid system.
    3. Apply a negative `margin-left` to negate the columns' gutters.
==============================================================================*/
.grid,
.grid--uniform {
  @include clearfix();
}

.grid,
.grid--uniform {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -$grid-gutter;
}

.grid__item {
  float: left;
  padding-left: $grid-gutter;
  width: 100%;
}

/*============================================================================
  Reversed grids allow you to structure your source in the opposite
  order to how your rendered layout will appear.
==============================================================================*/
.grid--rev {
  @extend .grid;
  direction: rtl;
  text-align: left;

  > .grid__item {
    direction: ltr;
    text-align: left;
    float: right;
  }
}

/*============================================================================
  #Grid Columns
    - Create width classes with the modifiers for each breakpoint.

    - Breakpoint specific columns are generated for each breakpoint based
    on the values in `$grid-breakpoints` e.g. `.grid-3` `.grid-3--tablet-up`
==============================================================================*/
@mixin grid-column-generator($grid-columns, $grid-breakpoint-type:"") {
  @for $i from 1 through $grid-columns {
    .grid-#{$i}#{$grid-breakpoint-type} {
      width: #{percentage($i / $grid-columns)};
    }
  }
}

/*================ Grid Push Setup ================*/
@mixin grid-push-generator($grid-columns, $grid-breakpoint-type:"") {
  @for $i from 1 through $grid-columns {
    .grid-push-#{$i}#{$grid-breakpoint-type} {
      margin-left: #{percentage($i / $grid-columns)};
    }
  }
}

/*================ Clearfix helper on uniform grids ================*/
@mixin grid-uniform-clearfix($grid-breakpoint-type:"") {
  .grid--uniform {
    .grid-1#{$grid-breakpoint-type}:nth-child(12n+1),
    .grid-2#{$grid-breakpoint-type}:nth-child(6n+1),
    .grid-3#{$grid-breakpoint-type}:nth-child(4n+1),
    .grid-4#{$grid-breakpoint-type}:nth-child(3n+1),
    .grid-6#{$grid-breakpoint-type}:nth-child(2n+1)    { clear: both; }
  }
}


/*============================================================================
  #Build The Grid Classes
==============================================================================*/

/*================ Base Grid Classes ================*/
@include grid-column-generator($grid-columns);
@include responsive-display-helper();

/*================ Responsive Grid Classes ================*/
@each $breakpoint in $grid-breakpoint-types {
  @include media-query($breakpoint) {
    @include grid-column-generator($grid-columns, '--#{$breakpoint}');
    @include grid-uniform-clearfix('--#{$breakpoint}');
    @include responsive-display-helper('--#{$breakpoint}');
  }
}

/*================ Grid Push Classes ================*/
@each $breakpoint in $grid-breakpoint-has-push {
  @include media-query($breakpoint) {
    @include grid-push-generator($grid-columns, '--#{$breakpoint}');
  }
}
