window.theme = window.theme || {};

//=require _canvas.js.liquid
//=require _strings.js.liquid

// Add theme-related JS after _canvas.js.liquid

theme.initCache = function () {
  theme.cache = {
    $addToCart: $('#AddToCart'),
    $productPrice: $('#ProductPrice'),
    $comparePrice: $('#ComparePrice'),
    $addToCartText: $('#AddToCartText'),
    $productFeaturedImage: $('#ProductPhotoImg'),
    $productThumbs: $('#ProductThumbs').find('.product-single__thumbnail')
  };
};

theme.init = function () {
  theme.initCache();
  theme.stringOverrides();
  theme.initProductVariant();
};

theme.stringOverrides = function () {
  // Override defaults in theme.strings with potential
  // template overrides

  window.productStrings = window.productStrings || {};
  $.extend(theme.strings, window.productStrings);
};

theme.initProductVariant = function () {
  // productSingleObject is a global JSON object defined in product.liquid
  if (!theme.productSingleObject) {
    return;
  }

  // Pre-loading product images to avoid a lag when a thumbnail is clicked, or
  // when a variant is selected that has a variant image. Change 'large' to
  // what fits your theme.
  Shopify.Image.preload(theme.productSingleObject.images, 'large');

  // Initialize multiple variant selector dropdowns, using option_selection.js
  new Shopify.OptionSelectors('ProductSelect', {
    product: theme.productSingleObject,
    onVariantSelected: theme.productVariantCallback,
    enableHistoryState: true
  });

  // Clean up variant labels if the Shopify-defined
  // defaults are the only ones left
  ShopifyCanvas.simplifyVariantLabels(theme.productSingleObject);
};

theme.productVariantCallback = function (variant, selector) {
  if (variant) {
    // Update variant image, if one is set
    if (variant.featured_image) {
      var size = Shopify.Image.imageSize(theme.cache.$productFeaturedImage.attr('src'));
      var sizedImgUrl = Shopify.Image.getSizedImageUrl(variant.featured_image.src, size);
      theme.switchProductImage(sizedImgUrl);
    }

    // Update the product price
    theme.cache.$productPrice.html(Shopify.formatMoney(variant.price, theme.moneyFormat));

    // Update and show the product's compare price if necessary
    if (variant.compare_at_price > variant.price) {
      theme.cache.$comparePrice.html(Shopify.formatMoney(variant.compare_at_price, theme.moneyFormat)).removeClass('hide');
    } else {
      theme.cache.$comparePrice.addClass('hide');
    }

    // Select a valid variant if available
    if (variant.available) {
      // We have a valid product variant, so enable the submit button
      theme.cache.$addToCart.prop('disabled', false);
      theme.cache.$addToCartText.html(theme.strings.addToCart);
    } else {
      // Variant is sold out, disable the submit button and change the text
      theme.cache.$addToCart.prop('disabled', true);
      theme.cache.$addToCartText.html(theme.strings.soldOut);
    }
  } else {
    // The variant doesn't exist, disable submit button and change the text.
    // This may be an error or notice that a specific variant is not available.
    theme.cache.$addToCart.prop('disabled', true);
    theme.cache.$addToCartText.html(theme.strings.unavailable);
  }
};

theme.switchProductImage = function (image) {
  if (theme.cache.$productFeaturedImage) {
    theme.cache.$productFeaturedImage.attr('src', image);
  }
};

$(theme.init);
