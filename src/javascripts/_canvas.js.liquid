window.ShopifyCanvas = window.ShopifyCanvas || {};

//=require vendor/fastclick.min.js
//=require canvas/a11y-helpers.js

/**
 *
 *  Initialize function for all ShopifyCanvas JS.
 *  - call any functions required on page load here.
 *
 */
ShopifyCanvas.init = function () {
  FastClick.attach(document.body);
  new ShopifyCanvas.A11yHelpers();
  ShopifyCanvas.checkUrlHash();
  ShopifyCanvas.initEventListeners();
  ShopifyCanvas.resetPasswordSuccess();
  ShopifyCanvas.customerAddressForm();
  ShopifyCanvas.rteElements();
  ShopifyCanvas.giftCardTemplate();
};

ShopifyCanvas.initEventListeners = function () {
  //Show reset password form
  $('#RecoverPassword').on('click', function(evt) {
    evt.preventDefault();
    ShopifyCanvas.toggleRecoverPasswordForm();
  });

  //Hide reset password form
  $('#HideRecoverPasswordLink').on('click', function(evt) {
    evt.preventDefault();
    ShopifyCanvas.toggleRecoverPasswordForm();
  });
};

/**
 *
 *  Show/Hide recover password form
 *
 */
ShopifyCanvas.toggleRecoverPasswordForm = function () {
  $('#RecoverPasswordForm').toggleClass('hide');
  $('#CustomerLoginForm').toggleClass('hide');
};

/**
 *
 *  Show reset password success message
 *
 */
ShopifyCanvas.resetPasswordSuccess = function() {
  var $formState = $('.reset-password-success');

  //check if reset password form was successfully submited.
  if (!$formState.length) {
    return;
  }

  // show success message
  $('#ResetSuccess').removeClass('hide');
};

/**
 *
 *  Show/hide customer address forms
 *
 */
ShopifyCanvas.customerAddressForm = function () {
  var $newAddressForm = $('#AddressNewForm');

  if (!$newAddressForm.length) {
    return;
  }

  // Initialize observers on address selectors, defined in shopify_common.js
  if (Shopify) {
    new Shopify.CountryProvinceSelector('AddressCountryNew', 'AddressProvinceNew', {
      hideElement: 'AddressProvinceContainerNew'
    });
  }

  // Initialize each edit form's country/province selector
  $('.address-country-option').each(function() {
    var formId = $(this).data('form-id');
    var countrySelector = 'AddressCountry_' + formId;
    var provinceSelector = 'AddressProvince_' + formId;
    var containerSelector = 'AddressProvinceContainer_' + formId;

    new Shopify.CountryProvinceSelector(countrySelector, provinceSelector, {
      hideElement: containerSelector
    });
  });

  // Toggle new/edit address forms
  $('.address-new-toggle').on('click', function() {
    $newAddressForm.toggleClass('hide');
  });

  $('.address-edit-toggle').on('click', function () {
    var formId = $(this).data('form-id');
    $('#EditAddress_' + formId).toggleClass('hide');
  });

  $('.address-delete').on('click', function() {
    var $el = $(this);
    var formId = $el.data('form-id');
    var confirmMessage = $el.data('confirm-message');
    if (confirm(confirmMessage || "Are you sure you wish to delete this address?")) {
      Shopify.postLink('/account/addresses/' + formId, {'parameters': { '_method': 'delete' }});
    }
  });
};

/**
 *
 *  Wrap tables in the RTE with a scrollable div
 *  so they cannot break the layout if too wide.
 *  Wrap videos in div to force responsive layout.
 *
 */
ShopifyCanvas.rteElements = function () {
  $('.rte table').wrap('<div class="rte__table-wrapper"></div>');

  var $iframeVideo = $('iframe[src*="youtube.com/embed"], iframe[src*="player.vimeo"]');
  var $iframeReset = $iframeVideo.add('iframe#admin_bar_iframe');

  $iframeVideo.each(function () {
    // Add wrapper to make video responsive
    $(this).wrap('<div class="video-wrapper"></div>');
  });

  $iframeReset.each(function () {
    // Re-set the src attribute on each iframe after page load
    // for Chrome's "incorrect iFrame content on 'back'" bug.
    // https://code.google.com/p/chromium/issues/detail?id=395791
    // Need to specifically target video and admin bar
    this.src = this.src;
  });
};

/**
 *
 *  Adjust option_selection.js labels based on variant default values
 *
 */
ShopifyCanvas.simplifyVariantLabels = function (product) {
  // option_selection.js does not add a label if there is only one variant option.
  // Add one as long as it is not 'Title' (Shopify's default), add one.
  if (product.options.length === 1 && product.options[0] !== 'Title') {
    $('.selector-wrapper:eq(0)').prepend('<label for="ProductSelect-option-0">'+ product.options[0] +'</label>');
  }

  // Hide variant dropdown if only one exists and title contains 'Default'
  if (product.variants.length && product.variants[0].title.indexOf('Default') >= 0) {
    $('.selector-wrapper').hide();
  }
};

/**
 *
 *  Gift card template helpers
 *
 */
ShopifyCanvas.giftCardTemplate = function () {
  if (!$('body').hasClass('template-giftcard')) {
    return;
  }

  new QRCode(document.getElementById('QrCode'), {
    text: $('#QrCode').attr('data-identifier'),
    width: 120,
    height: 120
  });

  $('#PrintGiftCard').on('click', function() {
    window.print();
  });

  /*============================================================================
    Auto-select gift card code on click, based on ID passed to the function
  ==============================================================================*/
  $('.giftcard__code').on('click', { element: 'GiftCardDigits' }, selectText);

  function selectText(evt) {
    var doc = document,
        text = doc.getElementById(evt.data.element);

    if (doc.body.createTextRange) { // ms method
      var range = doc.body.createTextRange();
      range.moveToElementText(text);
      range.select();
    } else if (window.getSelection) { // moz, opera, webkit method
      var selection = window.getSelection(),
          range = doc.createRange();
      range.selectNodeContents(text);
      selection.removeAllRanges();
      selection.addRange(range);
    }
  }
};

/**
 *
 *  Check URL for reset password hash
 *
 */
ShopifyCanvas.checkUrlHash = function () {
  var hash = window.location.hash;

  // Allow deep linking to recover password form
  if (hash == '#recover') {
    ShopifyCanvas.toggleRecoverPasswordForm();
  }
};

// Initialize ShopifyCanvas's JS on docready
$(ShopifyCanvas.init);
